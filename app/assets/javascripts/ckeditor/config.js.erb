CKEDITOR.editorConfig = function( config ) {
  // Define changes to default configuration here. For example:
  config.language = 'ru';
  
  // config.uiColor = '#AADC6E';
  config.skin = 'moono';

  /* Filebrowser routes */
  // The location of an external file browser, that should be launched when "Browse Server" button is pressed.
  config.filebrowserBrowseUrl = "/ckeditor/attachment_files";

  // The location of an external file browser, that should be launched when "Browse Server" button is pressed in the Flash dialog.
  config.filebrowserFlashBrowseUrl = "/ckeditor/attachment_files";

  // The location of a script that handles file uploads in the Flash dialog.
  config.filebrowserFlashUploadUrl = "/ckeditor/attachment_files";

  // The location of an external file browser, that should be launched when "Browse Server" button is pressed in the Link tab of Image dialog.
  config.filebrowserImageBrowseLinkUrl = "/ckeditor/pictures";

  // The location of an external file browser, that should be launched when "Browse Server" button is pressed in the Image dialog.
  config.filebrowserImageBrowseUrl = "/ckeditor/pictures";

  // The location of a script that handles file uploads in the Image dialog.
  config.filebrowserImageUploadUrl = "/ckeditor/pictures";

  // The location of a script that handles file uploads.
  config.filebrowserUploadUrl = "/ckeditor/attachment_files";

  config.stylesSet = [];
  config.extraPlugins = "colorbutton,colordialog,font,magicline,codemirror,mediaembed,stylesheetparser,ipsum,CKCss,wordcount,youtube,map";
  config.contentsCss = "<%= stylesheet_path('ckcontent.css') %>";

  config.tabSpaces = 2;
  config.toolbar = 'CMS';
  config.toolbar_CMS =
    [
        ['Source'], ['RemoveFormat'], ['PasteText','PasteFromWord'], ['Undo','Redo'],
        ['Styles','Format','Font','FontSize', 'TextColor', 'BGColor'],  ['JustifyLeft','JustifyCenter', 'JustifyRight'],
        '/',
        ['Bold','Italic','Underline'], ['NumberedList','BulletedList','Blockquote'],
        ['Link','Unlink'], ['Image', 'Flash'],
        ['Table','HorizontalRule','SpecialChar'], ['Maximize', 'Subscript', 'Superscript'], ['Outdent','Indent', 'ShowBlocks'],
        ['ipsum', 'CKCss', 'Youtube', 'map']
    ];

  config.font_names = 'Arial/Arial, Helvetica, sans-serif;Times New Roman/Times New Roman, Times, serif;Verdana;TrebuchetMS';

  // Rails CSRF token
  config.filebrowserParams = function(){
    var csrf_token, csrf_param, meta,
        metas = document.getElementsByTagName('meta'),
        params = new Object();

    for ( var i = 0 ; i < metas.length ; i++ ){
      meta = metas[i];

      if (meta.name == "csrf-token") {
          csrf_token = meta.content;                            
      } else if (meta.name == "csrf-param") {
          csrf_param = meta.content;                                   
      }
    }

    if (csrf_param !== undefined && csrf_token !== undefined) {
      params[csrf_param] = csrf_token;
    }

    return params;
  };

  config.addQueryString = function( url, params ) {
    var queryString = [];

    if ( !params ) {
      return url;
    } else {
      for ( var i in params )
        queryString.push( i + "=" + encodeURIComponent( params[ i ] ) );
    }

    return url + ( ( url.indexOf( "?" ) != -1 ) ? "&" : "?" ) + queryString.join( "&" );
  };

  // Integrate Rails CSRF token into file upload dialogs (link, image, attachment and flash)
  CKEDITOR.on('dialogDefinition', function(ev) {
    // Take the dialog name and its definition from the event data.
    var dialogName = ev.data.name;
    var dialogDefinition = ev.data.definition;
    var content, upload;

    if (CKEDITOR.tools.indexOf(['link', 'image', 'attachment', 'flash'], dialogName) > -1) {
      content = (dialogDefinition.getContents('Upload') || dialogDefinition.getContents('upload'));
      upload = (content == null ? null : content.get('upload'));

      if (upload && upload.filebrowser && upload.filebrowser['params'] === undefined) {
        upload.filebrowser['params'] = config.filebrowserParams();
        upload.action = config.addQueryString(upload.action, upload.filebrowser['params']);
      }
    }
  });
};